import { createRequire } from 'module'
const require = createRequire(import.meta.url)
const file_system = require('fs')
let archiver = require('archiver')
let request = require('request')

if (!file_system.existsSync('dist')) {
    file_system.mkdirSync('dist');
}

let categories = {}

request.get(`https://raw.githubusercontent.com/DenisPodgurskii/wappalyzer/master/src/categories.json`, function (error, response, body) {
    categories = JSON.parse(body)
})
await new Promise(resolve => { setTimeout(resolve, 100) })

let technologies = {}

for (const index of Array(27).keys()) {
    const character = index ? String.fromCharCode(index + 96) : '_'
    request.get(`https://raw.githubusercontent.com/DenisPodgurskii/wappalyzer/master/src/technologies/${character}.json`, function (error, response, body) {
        technologies = {
            ...technologies,
            ...JSON.parse(body)
        }
    })
    await new Promise(resolve => { setTimeout(resolve, 300) })
}



file_system.writeFileSync('src/ptk/packages/wappalyzer/technologies.json', JSON.stringify({ categories: categories, technologies: technologies }, null, 4))





// Chrome
let manifestOrigin = JSON.parse(file_system.readFileSync('src/manifest.json', 'utf8'))
manifestOrigin['incognito'] = 'split'
file_system.writeFileSync('src/manifest.json', JSON.stringify(manifestOrigin, null, 4))

let output = file_system.createWriteStream('dist/chrome_' + manifestOrigin.version + '.zip')
let archive = archiver('zip')
output.on('close', function () {
    console.log(archive.pointer() + ' total bytes')
    console.log('archiver has been finalized and the output file descriptor has closed.')
})
archive.on('error', function (err) {
    throw err
})
archive.pipe(output)
archive.directory('src/', false)
archive.finalize()

await new Promise(resolve => {
    setTimeout(resolve, 3000)
})
delete manifestOrigin.incognito
file_system.writeFileSync('src/manifest.json', JSON.stringify(manifestOrigin, null, 4))


await new Promise(resolve => {
    setTimeout(resolve, 3000)
})
let manifest = JSON.parse(file_system.readFileSync('src/manifest.json', 'utf8'))
// Firefox
manifest.permissions = manifest.permissions.filter(item => (item != 'background' && item != 'debugger'))
file_system.writeFileSync('src/manifest.json', JSON.stringify(manifest, null, 4))
output = file_system.createWriteStream('dist/firefox_' + manifest.version + '.zip')
archive = archiver('zip')
output.on('close', function () {
    console.log(archive.pointer() + ' total bytes')
    console.log('archiver has been finalized and the output file descriptor has closed.')
})
archive.on('error', function (err) {
    throw err
})
archive.pipe(output)
archive.directory('src/', false)
archive.finalize()

await new Promise(resolve => {
    setTimeout(resolve, 3000)
})

file_system.writeFileSync('src/manifest.json', JSON.stringify(manifestOrigin, null, 4))
