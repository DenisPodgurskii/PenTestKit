/* Author: Denis Podgurskii */
import { ptk_controller_cve } from "../../../controller/cve.js"
import { ptk_utils, ptk_jwtHelper } from "../../../background/utils.js"
import CryptoES from '../../../packages/crypto-es/index.js';
const controller = new ptk_controller_cve()


var hasher = {
    sha1: function (data) {
        return CryptoES.SHA1(data).toString(CryptoES.enc.Hex)
    }
};



jQuery(function () {

    controller.dt = []
    bindTable('#tbl_technologies', {
        "columns": [{ width: "15%" }, { width: "15%" }, { width: "70%" }]
    })


    controller.init().then(() => {
        bindInfo()
        initRepo().then(() => {
            return bindCVE().then(() => {
                setTimeout(function () {
                    console.log(controller.dt)
                    let ds = new Array()
                    if (controller.dt.length > 0) {
                        Object.values(controller.dt).forEach(item => {
                            if (item[1][0].vulnerabilities) {
                                let vulnsInfo = '<div class="ui attached info message"><b>Found in:</b> ' + item[0] + '</div>'
                                vulnsInfo += bindVulns(item[1][0].vulnerabilities)

                                ds.push([item[1][0].component, item[1][0].version, vulnsInfo])
                            }
                        })
                    }
                    let params = { "data": ds, }
                    bindTable('#tbl_technologies', params)
                    $('.loader.technologies').hide()
                }, 1500)
            })
        })
    })


})




/* Helpers */

function bindVulns(vulns) {
    let ret = '<table class="ui celled attached table  responsive nowrap unstackable dataTable no-footer"><thead><th style="width:10%">Severity</th><th style="width:60%">Summary</th><th style="width:30%">Proof</th></thead>'
    Object.values(vulns).forEach(item => {
        ret += `<tr class="${(item.severity == 'high' ? 'ui red' : '')}">`
        ret += `<td>${(item.severity.charAt(0).toUpperCase() + item.severity.slice(1))}</td>`
        ret += `<td>${(item.identifiers.summary ? item.identifiers.summary : 'N/A')}</td>`
        let str = ''
        if (item.identifiers.CVE) {
            Object.values(item.identifiers.CVE).forEach(link => {
                str += `<a target="_blank" href="https://www.cvedetails.com/cve/${link}/">${link}</a><br>`
            })
        }
        else {

            Object.values(item.info).forEach(link => {
                str += `<a target="_blank" href="${link}"><i class="external alternate icon"></i></a><br>`
            })

        }
        ret += "<td>" + str + "</td>"
        ret += "</tr>"
    })
    ret += '</table>'
    return ret
}


async function initRepo() {
    fetch(chrome.runtime.getURL('ptk/packages/retire/jsrepository.json'))
        .then(response => response.text())
        .then(data => {
            controller.repo = JSON.parse(retire.replaceVersion(data))
            //setFuncs()
        })
}

// function setFuncs() {
//     let repoFuncs = {};
//     for (var component in controller.repo) {
//         if (controller.repo[component].extractors.func) {
//             repoFuncs[component] = controller.repo[component].extractors.func;
//         }
//     }
// }

function getFileName(url) {
    var a = document.createElement("a");
    a.href = url;
    return (a.pathname.match(/\/([^\/?#]+)$/i) || [, ""])[1];
}

async function bindInfo() {
    let $form = $('#dashboard_form')
    if (controller.proxyOn) {
        $('#dashboard_message_text').text(controller.url)
    } else {
        $('#dashboard_message_text').html(`Tabs capturing disabled. Allow tabs capturing and reload the tab<i class="exclamation red  circle large icon"></i>`)
    }
}



async function bindCVE() {
    let dt = new Array()
    if (controller.urls)
        Object.values(controller.urls).forEach(url => {

            let results = retire.scanUri(url, controller.repo)

            if (results.length > 0) {
                dt.push([url, results])
            }

            results = retire.scanFileName(getFileName(url), controller.repo)

            if (results.length > 0) {
                dt.push([url, results])
            }

            fetch(url)
                .then(response => response.text())
                .then(content => {
                    var results = retire.scanFileContent(content, controller.repo, hasher);
                    if (results.length > 0) {
                        dt.push([url, results])
                    }
                })
        })
    controller.dt = dt
    return dt
}





/* Chrome runtime events handlers */
browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {

    if (message.channel == "ptk_content2popup" && message.type == "init_complete") {
        controller.storage = message.data.auth
        controller.complete(message.data)
    }

    if (message.channel == "ptk_background2popup_dashboard") {
        Object.assign(controller, message.data)

        if (message.type == "init_complete") {
            Object.assign(controller, message.data)
            //bindOWASP()
            bindCookies()
            bindHeaders()
        }

        if (message.type == "analyze_complete") {
            Object.assign(controller, message.data)
            bindTechnologies()
            bindWAF()
            bindStorage()
        }
    }
})

