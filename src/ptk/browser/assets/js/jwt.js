/* Author: Denis Podgurskii */
import * as jose from "../../../packages/jose/browser/index.js"


import { ptk_utils, ptk_jwtHelper } from "../../../background/utils.js"
import { ptk_decoder } from "../../../background/decoder.js"
import { ptk_controller_jwt } from "../../../controller/jwt.js"
import { ptk_controller_session } from "../../../controller/session.js"


const controller = new ptk_controller_jwt()
const session_controller = new ptk_controller_session()
const jwtHelper = new ptk_jwtHelper()
const decoder = new ptk_decoder()

let editorToken, editorHeader, editorPayload
let editorMode, tokens

/* 
editorMode == 1
when paste/change raw token

editorMode == 2
when change alg, header, payload, sign

*/

jQuery(function () {

    let $form = $('#generate_keys_dlg_form')
    $form.form({
        inline: true,
        on: 'blur',
        keyboardShortcuts: false,
        fields: {
            algorithm: {
                identifier: 'generate_keys_dlg_algorithm',
                rules: [{ type: 'empty', prompt: 'Select required algorithm' }]
            }
        }
    })

    //$('.menu.keys_format .item').tab()

    $('.menu .item').tab()

    //change algorithm
    $("#algorithm-select").on('change', function (e) {
        if (editorMode == null) {
            updAlg(this.value)
        }
        showSignature(this.value)
    })

    $(".alg_input").on('change', function (e) {
        if (editorMode == null) {
            updToken()
            selectText("sign")
        }
    })
    $(".alg_input").on('keyup input', function (e) {
        selectText("sign")
    })

    // $("#key_public_key").on('change', function (e) {
    //     updToken()
    //     selectText("sign")

    // })

    // $("#key_private_key").on('change', function (e) {
    //     updToken()
    //     selectText("sign")

    // })

    $(".alg_wrapper").on('click', function (e) {
        selectText("sign")
    })

    $("#source").on('change', function (e) {
        let selectedToken
        if (tokens) {
            for (let i = 0; i < tokens.length; i++) {

                if (tokens[i][0] == this.value)
                    selectedToken = tokens[i][2]
            }
        }
        if (selectedToken) {
            editorMode = null
            bindToken(selectedToken)
        } else {
            reset()
        }
    })


    $("#generate_keys").on('click', function (e) {
        $("#generate_keys_dlg").modal('show')
    })

    $("#pem_jwk_convertor").on('click', function (e) {
        $("#pem_jwk_convertor_dlg").modal('show')
    })

    $("#pem_jwk_convertor_pem_btn").on('click', function (e) {
        let alg = $("#pem_jwk_convertor_algorithm").find(':selected').val()
        let cert = $("#pem_jwk_convertor_pem").val()
        let format = jwtHelper.detectCertFormat(cert)
        if (format == ptk_jwtHelper.SPKI) {
            jose.importSPKI(cert, alg, { extractable: true })
                .then(result => {
                    console.log(result)
                    jose.exportJWK(result).then(key => {
                        $('#pem_jwk_convertor_jwk').val(JSON.stringify(key, null, 2))
                    })
                })
                .catch(e => {
                    console.log(e)
                })
        }

    })


    $("#dlg_btn_key_generate").on('click', function (e) {

        let $form = $('#generate_keys_dlg_form')
        // $form.form({
        //     inline: true,
        //     keyboardShortcuts: false,
        //     fields: {
        //         algorithm: {
        //             identifier: 'generate_keys_dlg_algorithm',
        //             rules: [{ type: 'empty', prompt: 'Select required algorithm' }]
        //         }
        //     }
        // })
        $form.form('validate form')
        if ($form.form('is valid')) {
            let values = $form.form('get values')
            generateKeyPair(values['generate_keys_dlg_algorithm'])
        }
    })

    $("#dlg_btn_key_save").on('click', function (e) {
        $("#key_public_key").val($("#dlg_publicKey").val())
        $("#key_private_key").val($("#dlg_privateKey").val())
        $("#generate_keys_dlg").modal('hide')
        updToken()
    })

    $("#generate_attacks_hs").on('click', function (e) {
        $("#generate_attacks_dlg").modal('show')
        let $form = $('#jwt_form'), values = $form.form('get values')
        let payload = editorPayload.getValue().replace(/\n/g, '')
        let header = editorHeader.getValue().replace(/\n/g, '')
        let secret = values['alg_secret']
        jwtHelper.generateConfusionAttacks(header, payload, secret).then(result => {
            if (result?.length > 0) {
                let params = {
                    "data": result, "columns": [

                        {

                            render: function (data, type, row) {
                                return `
                            <div style="width:40px">
                                <div class="ui mini icon button token_copy">
                                <i class=" large icon copy " data-position="bottom left" title="Copy" ></i>
                                </div>
        
                            </div>`
                            }
                        },
                        { width: "98%", class: "token_to_copy" }]
                }
                bindTable('#tbl_attack_tokens', params)
            }
        })
    })

    $(document).on("click", ".token_copy", function () {
        let text = $(this).closest('tr').find('td:nth-child(2)').text()
        navigator.clipboard.writeText(text)
    })

    $(".resetall").on('click', function (e) {
        controller.reset().then(result => {
            reset()
        })
    })



    $("#this_source_upd").on('click', function (e) {
        let $form = $('#jwt_form'), values = $form.form('get values')
        let storage = values['source']
        let name = $("#source").find(':selected').attr('data-value')
        let value = editorToken.getDoc().getValue()
        updateSource(name, value, storage).then(result => {
            init()
        })

    })

    $("#all_sources_upd").on('click', function (e) {
        let promises = []
        let value = editorToken.getDoc().getValue()
        $('#source').find('option').each(function () {
            let storage = $(this).val()
            let name = $(this).attr('data-value')
            if (name != 'none') {
                promises.push(updateSource(name, value, storage))
            }
        })
        Promise.all(promises).then((values) => {
            init()
        })
    })




    /////

    // function updByEditorMode() {
    //     console.log('mode: ' + editorMode)
    //     if (editorMode == 2) {
    //         updToken()
    //     } else if (editorMode == 1) {
    //         updTokenControls()
    //     }
    // }

    async function generateKeyPair(alg) {
        return jose.generateKeyPair(alg, {
            extractable: true,
        }).then(async ({ publicKey, privateKey }) => {
            jose.exportSPKI(publicKey).then(key => {
                $('#dlg_publicKey_pem').val(key)
            })
            jose.exportJWK(publicKey).then(key => {
                $('#dlg_publicKey_jwk').val(JSON.stringify(key, null, 2))
            })
            jose.exportPKCS8(privateKey).then(key => {
                $('#dlg_privateKey_pem').val(key)
            })
            jose.exportJWK(privateKey).then(key => {
                $('#dlg_privateKey_jwk').val(JSON.stringify(key, null, 2))
            })
        })
    }

    function updateSource(name, value, storage) {
        if (storage == 'none') {
            return controller.save(value)
        }
        if (controller.tab?.tabId) {
            if (storage == 'localStorage' || storage == 'sessionStorage') {
                return browser.tabs.sendMessage(controller.tab.tabId, {
                    channel: "ptk_popup2content",
                    type: 'update_storage',
                    storage: storage,
                    name: name,
                    value: value
                })
            }
            if (storage == 'cookie') {
                return session_controller.init().then(result => {
                    for (let i = 0; i < result.cookies?.length; i++) {
                        if (result.cookies[i]['name'] == name) {
                            result.cookies[i]['value'] = value
                            return session_controller.saveByIndex(i, result.cookies[i])
                        }
                    }
                    return Promise.resolve()
                })
            }
        }
    }

    function updTokenControls() {
        editorMode = 2
        let token = editorToken.getDoc().getValue()
        let { jwtToken, decodedToken } = jwtHelper.checkToken(token)
        if (jwtToken) {
            //Decoded
            let jwt = JSON.parse(decodedToken)

            //Alg dropdown
            let $form = $('#jwt_form')
            $form.form('set values', {
                'algorithm-select': jwt["header"]["alg"]
            })

            //Header
            $('#encodeHeader').val(JSON.stringify(jwt["header"], null, 2))
            editorHeader.getDoc().setValue(JSON.stringify(jwt["header"], null, 2))

            //Payload
            $('#encodePayload').val(JSON.stringify(jwt["payload"], null, 2))
            editorPayload.getDoc().setValue(JSON.stringify(jwt["payload"], null, 2))

            //Signature
            showSignature(jwt["header"]["alg"])

            //Sign token
            let values = $form.form('get values')
            let payloadPlain = editorPayload.getValue().replace(/\n/g, '')
            let headerPlain = editorHeader.getValue().replace(/\n/g, '')
            let secret = values['alg_secret']
            let keys = { "public": values['key_public_key'], "private": values['key_private_key'] }

            verifyToken(jwt["header"]["alg"], token, secret, values['key_public_key']).then(result => {
                $('#signature_msg').text("Signature verified")
                $('#signature_msg_wrapper').removeClass('negative')
                $('#signature_msg_wrapper').addClass('positive')
                //$('.button.updatein').removeClass('disabled')
            }).catch(e => {
                $('#signature_msg').text(e.message)
                $('#signature_msg_wrapper').removeClass('positive')
                $('#signature_msg_wrapper').addClass('negative')
                //$('.button.updatein').addClass('disabled')
            })

            // signToken(headerPlain, payloadPlain, secret, keys).then((result) => {
            //     //console.log(result)
            //     $('#signature_msg').text("Signature verified")
            //     $('#signature_msg_wrapper').removeClass('negative')
            //     $('#signature_msg_wrapper').addClass('positive')
            //     $('.button.updatein').removeClass('disabled')

            // }).catch(e => {
            //     $('#signature_msg').text(e.message)
            //     $('#signature_msg_wrapper').removeClass('positive')
            //     $('#signature_msg_wrapper').addClass('negative')
            //     $('.button.updatein').addClass('disabled')
            // })
        }
        setTimeout(function () { editorMode = null }, 100)
    }

    function updToken() {
        console.log('update token')

        let $form = $('#jwt_form'), values = $form.form('get values')
        let payloadPlain = editorPayload.getValue().replace(/\n/g, '')
        let headerPlain = editorHeader.getValue().replace(/\n/g, '')
        let secret = values['alg_secret']
        let keys = { "public": values['key_public_key'], "private": values['key_private_key'] }

        if (payloadPlain) {
            editorMode = 1
            signToken(headerPlain, payloadPlain, secret, keys).then((result) => {
                //console.log(result)
                $('#signature_msg').text("Signature verified")
                $('#signature_msg_wrapper').removeClass('negative')
                $('#signature_msg_wrapper').addClass('positive')
                //$('.button.updatein').removeClass('disabled')
                $('#rawToken').val(result)
                editorToken.getDoc().setValue(result)
                editorMode = null
            }).catch(e => {
                let h = decoder.base64url_encode(headerPlain)
                let p = decoder.base64url_encode(payloadPlain)
                let current = editorToken.getDoc().getValue().split('.')[2]
                let result = h +"." + p + "." + current
                $('#rawToken').val(result)
                editorToken.getDoc().setValue(result)
                editorMode = null

                $('#signature_msg').text(e.message)
                $('#signature_msg_wrapper').removeClass('positive')
                $('#signature_msg_wrapper').addClass('negative')
                //$('.button.updatein').addClass('disabled')
                editorMode = null
                console.log(e)
            })

        }
    }


    async function signToken(header, payload, secret, keys) {
        let hObj = JSON.parse(header)
        let pObj = JSON.parse(payload)

        if (hObj.alg.toLowerCase() == 'none') {
            return decoder.base64url_encode(header.replace(/\n/g, '')) + "." + decoder.base64url_encode(payload.replace(/\n/g, '')) + "."
        }
        else if (['HS256', 'HS384', 'HS512'].includes(hObj.alg)) {
            //generateConfusion(hObj, pObj, secret)
            secret = new TextEncoder().encode(secret)
            return await new jose.SignJWT(pObj)
                .setProtectedHeader(hObj)
                .sign(secret)
        } else {
            const privateKey = await jose.importPKCS8(keys['private'], hObj.alg).catch(e => {
                console.log(e)
            })

            return await new jose.SignJWT(pObj)
                .setProtectedHeader(hObj)
                .sign(privateKey)

        }
    }

    // async function encryptToken(header, payload, secret, keys) {
    //     let hObj = JSON.parse(header)
    //     let pObj = JSON.parse(payload)
    //     hObj['enc'] = 'A128CBC-HS256'
    //     return await new jose.EncryptJWT(pObj)
    //         .setProtectedHeader(hObj)
    //         .encrypt(secret)
    // }

    async function verifyToken(alg, token, secret, publicKey) {
        if (alg.toLowerCase() == 'none') {
            return true
        }
        else if (['HS256', 'HS384', 'HS512'].includes(alg)) {
            secret = new TextEncoder().encode(secret)
            return jose.jwtVerify(token, secret)
        } else {
            return jose.jwtVerify(token, publicKey)
        }
    }

    function updAlg(alg) {
        let $form = $('#jwt_form'), values = $form.form('get values')
        let curVal = editorHeader.getValue()
        let header = JSON.parse(curVal)
        header.alg = alg
        $('#encodeHeader').val(JSON.stringify(header, null, 2))
        editorHeader.getDoc().setValue(JSON.stringify(header, null, 2))
        //updToken()
    }


    function initControls() {
        //raw token
        if (editorToken) editorToken.toTextArea()
        editorToken = CodeMirror.fromTextArea(document.getElementById('rawToken'), {
            lineWrapping: true, mode: "simple",
            scrollbarStyle: 'native',
            styleSelectedText: true,
        })
        //editorToken.setSize('auto', '100%')
        editorToken.on("change", function (instance, e) {
            if (editorMode == null)
                //controller.save(value)
                updTokenControls()
        })

        //header 
        if (editorHeader) editorHeader.toTextArea()
        editorHeader = CodeMirror.fromTextArea(document.getElementById('encodeHeader'), {
            mode: "application/json",
            scrollbarStyle: 'native'
        })
        editorHeader.setSize('auto', '100%')
        editorHeader.on("focus", function (instance, e) {
            selectText("header")
        })
        editorHeader.on("blur", function (instance, e) {
            removeMarks()
        })
        editorHeader.on("change", function (instance, e) {
            if (editorMode == null) {
                updToken()
                selectText("header")
            }
        })

        //payload
        if (editorPayload) editorPayload.toTextArea()
        editorPayload = CodeMirror.fromTextArea(document.getElementById('encodePayload'), {
            mode: "application/json",
            scrollbarStyle: 'native'
        })
        editorPayload.setSize('auto', '90vh')
        editorPayload.on("focus", function (instance, e) {
            selectText("payload")
        })
        editorPayload.on("blur", function (instance, e) {
            removeMarks()
        })
        editorPayload.on("change", function (instance, e) {
            if (editorMode == null) {
                updToken()
                selectText("payload")
            }
        })


    }

    function selectText(part) {
        removeMarks()
        let token = editorToken.getDoc().getValue()
        let [header, payload, sign] = token.split('.')
        let index = 0, len = 0, classname = ''
        if (part == "header") {
            index = token.indexOf(header)
            classname = "styled-header"
            len = header.length
        }
        if (part == "payload" && payload?.length > 0) {
            index = token.indexOf(payload)
            classname = "styled-payload"
            len = payload.length
        }
        if (part == "sign") {
            index = token.indexOf(sign)
            classname = "styled-signature"
            len = sign.length
        }
        setTimeout(function () {
            editorToken.markText({ line: 0, ch: index }, { line: 0, ch: index + len }, { className: classname })
        }, 10)
    }

    function removeMarks() {
        let marks = editorToken.getAllMarks()
        for (let i = 0; i < marks.length; i++) {
            marks[i].clear()
        }
    }


    // function bindSource(tokens) {

    //     for (let i = 0; i < tokens?.length; i++) {
    //         $("#source").dropdown('clear')
    //         $("#source").append("<option value=" + tokens[i][0] + ">" + tokens[i][0] + "</option>")
    //     }
    //     editorMode = null
    // }



    function init() {
        controller.init().then(result => {
            tokens = []
            initControls()
            if (result?.storage?.token) {
                tokens.push(['none', "none", result.storage.token])
            }
            if (result?.tab?.tabId) {
                $('#dashboard_message_text').text(result.tab.url)
                checkCookies(result.cookies)
                browser.tabs.sendMessage(result.tab.tabId, {
                    channel: "ptk_popup2content",
                    type: "get_storage"
                })
                // .then(res => {
                //     checkStorage(res)
                //     bindTokens(tokens)
                // }).catch(e => e)
            } else {
                bindTokens(tokens)
            }
        })
    }

    init()


})




//////////////////////////////


function showSignature(val) {
    if (val.toLowerCase() == 'none') {
        $('#alg_secret_wrapper').hide()
        $('#key_alg_wrapper').hide()
        $('#none_alg').show()
    }
    else if (val.startsWith('HS')) {
        $('#none_alg').hide()
        $('#key_alg_wrapper').hide()
        $('#alg_secret_wrapper').show()
        $('#secret_method').text($("#algorithm-select").find(':selected').attr('data-value'))
    }
    else {
        $('#none_alg').hide()
        $('#alg_secret_wrapper').hide()
        $('#key_alg_wrapper').show()
        $('#key_method').text($("#algorithm-select").find(':selected').attr('data-value'))
    }
}

function reset() {
    editorMode = 1
    $('#rawToken').val("")
    editorToken.getDoc().setValue("")
    //$('.button.updatein').addClass('disabled')

    editorMode = 2
    let $form = $('#jwt_form')
    $form.form('set values', {
        'algorithm-select': "none",
        'encodeHeader': '',
        'encodePayload': ""

    })
    let hVal = JSON.stringify({
        "typ": "JWT",
        "alg": "none"
    }, null, 2)
    editorHeader.getDoc().setValue(hVal)
    editorPayload.getDoc().setValue("")
    showSignature('none')
    editorMode = null

}



function bindTokens(tokens) {
    console.log(tokens)
    let selectedToken
    for (let i = 0; i < tokens.length; i++) {
        editorMode = null
        $("#source").dropdown('clear')
        $("#source option[value='" + tokens[i][0] + "']").remove()
        $("#source").append(`<option value="${tokens[i][0]}" data-value="${tokens[i][1]}" selected>[${tokens[i][1]}] in ${tokens[i][0]}</option>`)
        selectedToken = tokens[i][2]
    }
    if (selectedToken) {
        bindToken(selectedToken)
    } else {
        reset()
    }
    editorMode = null
}

function bindToken(token) {
    $('#rawToken').val(token)
    editorToken.getDoc().setValue(token)
}

function checkStorage(storage) {
    if (storage.localStorage) {
        let s = JSON.parse(storage.localStorage)
        let k = Object.keys(s)
        for (let i = 0; i < k.length; i++) {
            let { jwtToken, decodedToken } = jwtHelper.checkToken(s[k[i]])
            if (jwtToken) {
                tokens.push(['localStorage', k[i], jwtToken[0]])
            }
        }
    }
    if (storage.sessionStorage) {
        let s = JSON.parse(storage.sessionStorage)
        let k = Object.keys(s)
        for (let i = 0; i < k.length; i++) {
            let { jwtToken, decodedToken } = jwtHelper.checkToken(s[k[i]])
            if (jwtToken) {
                tokens.push(['sessionStorage', k[i], jwtToken[0]])
            }
        }
    }
}

function checkCookies(cookies) {
    for (let i = 0; i < cookies?.length; i++) {
        let c = cookies[i]
        let { jwtToken, decodedToken } = jwtHelper.checkToken(c.value)
        if (jwtToken) {
            tokens.push(['cookie', c.name, c.value])
        }
    }
}


browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {

    if (message.channel == "ptk_content2popup" && message.type == "return_storage") {
        checkStorage(message.data)
        bindTokens(tokens)
    }
})

