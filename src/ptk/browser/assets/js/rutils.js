import { ptk_utils } from "../../../background/utils.js"
import { ptk_decoder } from "../../../background/decoder.js"
const decoder = new ptk_decoder()

export function sortAttacks() {
    $(".attack_info")
        .sort((a, b) => $(a).data("order") - $(b).data("order"))
        .appendTo("#attacks_info");
}

function getMisc(info) {
    let icon = '', attackClass = 'nonvuln', order = 3

    if (info.success) {
        attackClass = 'vuln success visible'
        let iconClass = ""
        if (info.metadata.severity == 'High') {
            iconClass = "red"
            order = 0
        }
        if (info.metadata.severity == 'Medium') {
            iconClass = "orange"
            order = 1
        }
        if (info.metadata.severity == 'Low') {
            iconClass = "yellow"
            order = 2
        }

        icon = `<div ><i class="exclamation triangle ${iconClass} icon" ></i><b>Vulnerability detected</b></div>`

    }
    return {
        icon: icon,
        order: order,
        attackClass: attackClass
    }
}

export function bindAttack(info, original, index, requestId = -1) {
    let proof = ''

    let misc = getMisc(info)
    let icon = misc.icon, order = misc.order, attackClass = misc.attackClass

    if (info.proof)
        proof = `<div class="description"><p>Proof: <b><i name="proof">${ptk_utils.escapeHtml((info.proof))}</i></b></p></div>`

    let target = original?.request?.target ? original.request.target : ""
    let item = `
                <div class="ui medium message attack_info ${attackClass} ${requestId}" style="position:relative;margin-top: 0;" data-order="${order}">
                ${icon}
                <div class="description">
                    <p>Attack: ${ptk_utils.escapeHtml(info.metadata.name)}</p>
                </div>
                <div class="description">
                    <p>URL: <a href="${target}" target="_blank">${target}</a></p>
                </div>
                ${proof}
                <div class="ui left floated">
                    <a href="#" class="attack_details" data-requestId="${requestId}" data-index="${index}">Details</a>
                </div>
                </div>`

    return item
}


export function bindAttackDetails(el, attack, original) {
    let proof = attack.proof
    let response = attack.response?.body ? attack.response.body : original.response.body
    let request = attack.request?.raw ? attack.request.raw : original.request.raw
    let description = attack.metadata.description
    let recommendation = attack.metadata.recommendation
    let name = attack.metadata.name

    let misc = getMisc(attack)
    let icon = misc.icon


    $('#raw_request').val(request.trim())
    $('#raw_response').val(response)
    $('#attack_description').text(description)
    $('#attack_recommendation').html(recommendation)
    $('#attack_target').val(original?.request?.target)

    $('#attack_name').html(icon + name)

    let links = ""
    let keys = Object.keys(attack.metadata.links)
    for (let i = 0; i < keys.length; i++) {
        links += `
        <div class="item">
            <div class="content">
            <a class="header" target="_blank" href="${attack.metadata.links[keys[i]]}">${keys[i]}</a>
            <div class="description"><a class="header" target="_blank" href="${attack.metadata.links[keys[i]]}">${attack.metadata.links[keys[i]]}</a></div>
            </div>
        </div>
        `
    }
    $('#attack_links').html(links)


    $('#attack_details').modal('show')
    let index = $('#raw_response').val().indexOf(proof)
    $('#raw_response').scrollTop(0)
    if (index > -1) {
        let text = $('#raw_response').val()
        let textBeforePosition = text.substr(0, index)
        $('#raw_response').trigger('blur')
            .val(textBeforePosition)
            .trigger('focus')
            .val(text)
            .trigger('scroll')
            .selectRange(index, index + proof.length)
        $('#raw_response').scrollTop(($('#raw_response').scrollTop() + $('#raw_response').height() / 2))
    }
    return false
}