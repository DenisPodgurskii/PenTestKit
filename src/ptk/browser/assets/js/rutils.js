import { ptk_utils } from "../../../background/utils.js"
import { ptk_decoder } from "../../../background/decoder.js"
const decoder = new ptk_decoder()

export function bindAttack(info, original, requestId) {
    let icon = '', proof = '', attackClass = 'nonvuln'
    //let headers = info.response.statusLine + '\n' + info.response.headers.map(x => x.name + ": " + x.value).join('\n')
    if (info.success) {
        attackClass = 'vuln success visible'
        let iconClass = ""
        if (info.metadata.severity == 'High') iconClass = "red"
        if (info.metadata.severity == 'Medium') iconClass = "orange"
        if (info.metadata.severity == 'Low') iconClass = "yellow"

        icon = `<div ><i class="exclamation triangle ${iconClass} icon" ></i><b>Vulnerability detected</b></div>`
        if (info.proof)
            proof = `<div class="description"><p>Proof: <b><i name="proof">${ptk_utils.escapeHtml((info.proof))}</i></b></p></div>`
    }
    let target = original?.request?.target ? original.request.target : ""
    let request = info.request?.raw ? decoder.base64_encode(info.request.raw) : decoder.base64_encode(original.request.raw)
    let response = info.response?.raw ? decoder.base64_encode(info.response.raw) : decoder.base64_encode(original.response.raw)
    let item = `
                <div class="ui medium message attack_info ${attackClass} ${requestId}" style="position:relative;    margin-top: 0;">
                ${icon}
                <div class="description">
                    <p>Attack: ${ptk_utils.escapeHtml(info.metadata.name)}</p>
                </div>
                <div class="description">
                    <p>URL: <a href="${target}" target="_blank">${target}</a></p>
                </div>
                ${proof}
                <div class="ui left floated">
                <input type="hidden" name="icon" value="${decoder.base64_encode(icon)}" />
                <input type="hidden" name="name" value="${decoder.base64_encode(info.metadata.name)}" />
                <input type="hidden" name="description" value="${decoder.base64_encode(info.metadata.description)}" />
                <input type="hidden" name="request" value="${request}" />
                <input type="hidden" name="proof" value="${decoder.base64_encode(info.proof)}" />
                <input type="hidden" name="body" value="${response}" />
                    <a href="#" class="attack_details">Details</a>
                </div>
                </div>`

    return item
}


export function bindAttackDetails(el) {
    let proof = decoder.base64_decode(el.parent().find('[name="proof"]').val()).trim()
    let body = decoder.base64_decode(el.parent().find('[name="body"]').val()).trim()
    let description = decoder.base64_decode(el.parent().find('[name="description"]').val()).trim()
    let name = decoder.base64_decode(el.parent().find('[name="name"]').val()).trim()
    let icon = decoder.base64_decode(el.parent().find('[name="icon"]').val()).trim()


    $('#raw_request').val(decoder.base64_decode(el.parent().find('[name="request"]').val()).trim())
    $('#raw_response').val(body)
    $('#attack_description').text(description)
    $('#attack_name').html(icon + name)

    $('#attack_details').modal('show')
    let index = $('#raw_response').val().indexOf(proof)
    $('#raw_response').scrollTop(0)
    if (index > -1) {
        let text = $('#raw_response').val()
        let textBeforePosition = text.substr(0, index)
        $('#raw_response').trigger('blur')
            .val(textBeforePosition)
            .trigger('focus')
            .val(text)
            .trigger('scroll')
            .selectRange(index, index + proof.length)
        $('#raw_response').scrollTop(($('#raw_response').scrollTop() + $('#raw_response').height() / 2))
    }
    return false
}