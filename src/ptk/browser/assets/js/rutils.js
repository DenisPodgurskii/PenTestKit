import { ptk_utils } from "../../../background/utils.js"
import { ptk_decoder } from "../../../background/decoder.js"
const decoder = new ptk_decoder()


$('#attack_details_dialog_wrapper').prepend(

    `
    <div id="attack_details" class="ui fullscreen modal coupled" style="display: none; height: 83%">
        <i class="close icon"></i>
        <div class="ui header" id="attack_name"></div>
        <div class="content" style="min-height: 400px; overflow: scroll;height: 90%; padding: 2px 7px 2px 2px;scrollbar-width: none;">
            <form class="ui tiny form controls" id="attack_details_form">
                <input type="hidden" id="attack_target" name="request_url">
                <div class="fields" style="min-height: 65%;margin-bottom: 4px;">
                    <div class="eight wide field" style="padding-right: 1px;">
                        <div class="ui large label"
                            style="position: fixed;z-index: 1; height: 34px; padding-top: 10px;margin-top: -2px;min-width: 50%">
                            Request
                            <div class="ui mini icon secondary button send_rbuilder" style="position: absolute;top: 0px;right: -8px;z-index: 1;">
                                <i class=" wrench large icon" title="Send to R-Builder"></i>
                            </div>
                        </div>
                        <textarea readonly id="raw_request" class="ui large input" rows="5" placeholder="Request"
                            style="scrollbar-width: none;"></textarea>
                        

                 
                    </div>
                    <div class="eight wide field response_view" style="padding-right: 1px;">

                            <div class="ui large label"
                                style="position: fixed;z-index: 1; height: 34px; padding-top: 10px;margin-top: -2px;min-width: -webkit-fill-available;">
                                Response
                                
                                <div class="ui small secondary buttons"
                                    style="position: absolute;top: 0px;right: 0px;z-index: 1;">
                                    <div class="ui button showHtml">HTML</div>
                                    <div class="ui floating dropdown icon button">
                                        <i class="dropdown icon"></i>
                                        <div class="menu">
                                            <div class="item showHtmlNew"><i class="external square alternate icon"></i>
                                                Open in new window
                                            </div>
                                        </div>
                                    </div>
                                </div>


                            </div>

                            <textarea readonly id="raw_response" name="response_body" class="ui large input" rows="25"
                                placeholder="Response" style="height: 100%; padding-top: 35px;scrollbar-width: none;"
                                autofocus></textarea>

                    </div>
                </div>

                <div class="ui segment" style="padding: 0px;margin-right: -4px;margin-top: 0px;min-height: 35%;">
                    <div class="ui top attached tabular menu small metadata" style="background-color: #e8e8e8;">
                        <a class="item active" data-tab="first">Description</a>
                        <a class="item" data-tab="second">Recommendation</a>
                        <a class="item" data-tab="third">Links</a>
                    </div>
                    <div class="ui bottom attached tab segment small active" data-tab="first" style="min-height: 75%;">
                        <div id="attack_description"></div>
                    </div>
                    <div class="ui bottom attached tab segment small" data-tab="second" style="min-height: 75%;">
                        <div id="attack_recommendation"></div>
                    </div>
                    <div class="ui bottom attached tab segment small" data-tab="third" style="min-height: 75%;">
                        <div class="ui middle aligned divided list" id="attack_links">
                        </div>
                    </div>
                </div>


            </form>
        </div>
    </div>
    <div id="dialogResponseHtml" class="ui fullscreen modal coupled" style="display: none;height: 83%">
        <i class="close icon"></i>
        <div class="header">HTML response</div>
        
        <div class="content" id="dialogResponseHtmlContent" style="min-height: 400px;height: 90%;padding:0px">
            <object id="dialogResponseHtmlContentObj" data="" style="overflow:hidden;height:100%;width:100%; min-height: 400px;" height="100%"></object>
        </div>
    </div>
    `
)


export function sortAttacks() {
    $(".attack_info")
        .sort((a, b) => $(a).data("order") - $(b).data("order"))
        .appendTo("#attacks_info");
}

export function getMisc(info) {
    let icon = '', attackClass = 'nonvuln', order = 3

    if (info.success) {
        attackClass = 'vuln success visible ' + info.metadata.severity
        let iconClass = ""
        if (info.metadata.severity == 'High') {
            iconClass = "red"
            order = 0
        }
        if (info.metadata.severity == 'Medium') {
            iconClass = "orange"
            order = 1
        }
        if (info.metadata.severity == 'Low') {
            iconClass = "yellow"
            order = 2
        }

        icon = `<div ><i class="exclamation triangle ${iconClass} icon" ></i><b>Vulnerability detected</b></div>`

    }
    return {
        icon: icon,
        order: order,
        attackClass: attackClass
    }
}

export function bindAttack(info, original, index, requestId = -1) {
    let proof = ''

    let misc = getMisc(info)
    let icon = misc.icon, order = misc.order, attackClass = misc.attackClass

    if (info.proof)
        proof = `<div class="description"><p>Proof: <b><i name="proof">${ptk_utils.escapeHtml((info.proof))}</i></b></p></div>`

    let target = original?.request?.target ? original.request.target : ""
    let item = `
                <div class="ui message attack_info ${attackClass} ${requestId}" style="position:relative;margin-top: 0;" data-order="${order}">
                ${icon}
                <div class="description">
                    <p>Attack: ${ptk_utils.escapeHtml(info.metadata.name)}</p>
                </div>
                <div class="description">
                    <p>URL: <a href="${target}" target="_blank">${target}</a></p>
                </div>
                ${proof}
                <div class="ui left floated">
                    <a href="#" class="attack_details" data-requestId="${requestId}" data-index="${index}">Details</a>
                </div>
                </div>`

    return item
}

let editor
export function bindAttackDetails(el, attack, original) {
    let proof = attack.proof
    let response = attack.response?.body ? attack.response.body : original.response.body
    let request = attack.request?.raw ? attack.request.raw : original.request.raw
    let description = attack.metadata.description
    let recommendation = attack.metadata.recommendation
    let name = attack.metadata.name

    let misc = getMisc(attack)
    let icon = misc.icon



    $('#raw_response').val(response)
    $('#attack_description').text(description)
    $('#attack_recommendation').html(recommendation)
    $('#attack_target').val(original?.request?.target)



    $('#attack_name').html(icon + name)

    let links = ""
    let keys = Object.keys(attack.metadata.links)
    for (let i = 0; i < keys.length; i++) {
        links += `
        <div class="item">
            <div class="content">
            <a class="header" target="_blank" href="${attack.metadata.links[keys[i]]}">${keys[i]}</a>
            <div class="description"><a class="header" target="_blank" href="${attack.metadata.links[keys[i]]}">${attack.metadata.links[keys[i]]}</a></div>
            </div>
        </div>
        `
    }
    $('#attack_links').html(links)

    $('#attack_details').modal('show')
    setTimeout(function () {
        let index = $('#raw_response').val().indexOf(proof)
        $('#raw_response').scrollTop(0)
        if (index > -1) {
            let text = $('#raw_response').val()
            let textBeforePosition = text.substr(0, index)
            $('#raw_response').trigger('blur')
                .val(textBeforePosition)
                .trigger('focus')
                .val(text)
                .trigger('scroll')
                .selectRange(index, index + proof.length)
            $('#raw_response').scrollTop(($('#raw_response').scrollTop() + $('#raw_response').height() / 2))
        }
    }, 100)


    $('#raw_request').val(request)

    if (editor) editor.toTextArea()
    editor = CodeMirror.fromTextArea(document.getElementById('raw_request'), {
        lineNumbers: false, lineWrapping: true, indentUnit: 4, mode: "message/http"
    })
    editor.getDoc().setValue(request)
    editor.setSize('101.5%', '100%')
    editor.setCursor({ line: 1, ch: 1 })


    return false
}

export function showHtml(obj, newWin = false) {
    let formId = obj.closest('.ui.tab.active').attr('id'), target = ""
    if (formId) {
        let $form = $('#' + formId + ' #request_form'), values = $form.form('get values')
        target = (new URL(values['request_url'])).origin
    } else {
        let $form = $('#attack_details_form'), values = $form.form('get values')
        target = (new URL(values['request_url'])).origin
    }
    let htmlString = obj.closest('.response_view').find('[name="response_body"]').val()
    htmlString = htmlString.replace(/<([^<])*(head)([^>])*>/, "<$1$2><base href='" + target + "' />")
    //let dataBase64 = 'data:text/html;base64,' + decoder.base64_encode(htmlString)
    //let blob = new Blob([unescape(encodeURIComponent(htmlString))], { type: 'text/html' })
    let url = 'showhtml.html?s=' + decoder.base64_encode(encodeURI(htmlString))

    if (newWin) {
        browser.windows.create({
            url: browser.runtime.getURL("/ptk/browser/" + url)
        })
    } else {
        $('#dialogResponseHtml').modal('show')
        $('#dialogResponseHtmlContentObj').prop('data', url)
    }
    return false
}