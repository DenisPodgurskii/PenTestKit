/* Author: Denis Podgurskii */
import { ptk_sqlinjection } from "../modules/active/sqlinjection.js"
import { ptk_xss } from "../modules/active/xss.js"
import { ptk_oscommand } from "../modules/active/oscommand.js"
import { ptk_jwt } from "../modules/active/jwt.js"
import { ptk_request } from "../background/request.js"
import { ptk_utils, ptk_logger, ptk_queue } from "../background/utils.js"

export class ptk_rattacker {

    constructor(settings) {
        this.settings = settings
        this.reset()
        this.attackModules = {
            SqlInjection: new ptk_sqlinjection(),
            XSS: new ptk_xss(),
            OSCommand: new ptk_oscommand(),
            JWT: new ptk_jwt()
        }
    }

    reset() {
        this.scanResult = {
            scannedTabId: null,
            scanId: null,
            tabId: null,
            host: null,
            uniqueRequestQueue: new ptk_queue(),
            requestQueue: new ptk_queue(),
            items: {},
            stats: {
                vulnsCount: 0,
                attacksCount: 0
            },
            settings: {}
        }
    }

    addMessageListeners() {
        this.onMessage = this.onMessage.bind(this)
        browser.runtime.onMessage.addListener(this.onMessage)
    }

    addListeners() {
        this.onRemoved = this.onRemoved.bind(this)
        browser.tabs.onRemoved.addListener(this.onRemoved)

        this.onCompleted = this.onCompleted.bind(this)
        browser.webRequest.onCompleted.addListener(
            this.onCompleted,
            { urls: ["<all_urls>"], types: ptk_utils.requestFilters },
            ["responseHeaders"].concat(ptk_utils.extraInfoSpec)
        )
    }

    removeListeners() {
        browser.tabs.onRemoved.removeListener(this.onRemoved)
        browser.webRequest.onCompleted.removeListener(this.onCompleted)
    }

    onRemoved(tabId, info) {
        if (this.scanResult?.tabId == tabId) this.scanResult.tabId = null
    }

    onCompleted(response) {
        if (this.scanResult?.tabId == response.tabId && !this.settings.blacklist.includes(response.type)) {
            let r = window.ptk_app.proxy.getRawRequest(window.ptk_app.proxy.getTab(response.tabId), response.frameId, response.requestId)
            this.addRequest(r)
        }
    }

    onMessage(message, sender, sendResponse) {
        if (message.channel == "ptk_popup2background_rattacker") {
            if (this["msg_" + message.type]) {
                return this["msg_" + message.type](message)
            }
            return Promise.resolve({ result: false })
        }

        if(message.channel == "ptk_content2rattacker" && message.type == 'xss_confirmed'){
            if(this.scanResult.host == (new URL(message.data.origin)).host){
                console.log(message.data)
                console.log(this.scanResult)
                this.checkConfirmedAttack(message.data)
            }
        }
    }

    msg_init(message) {
        return Promise.resolve({ scanResult: JSON.parse(JSON.stringify(this.scanResult)) })
    }

    msg_confirm_xss(message){
        console.log(message)
    }

    msg_reset(message) {
        this.reset()
        return Promise.resolve({ scanResult: JSON.parse(JSON.stringify(this.scanResult)) })
    }

    msg_run_scan(message) {
        this.reset()
        this.scanResult.scanId = ptk_utils.UUID()
        this.runAllAttacks(message.schema)
        return Promise.resolve({ success: true })
    }

    msg_run_bg_scan(message) {
        this.runBackroungScan(message.tabId, message.host)
        return Promise.resolve({ success: true, scanResult: JSON.parse(JSON.stringify(this.scanResult)) })
    }

    msg_stop_bg_scan(message) {
        this.stopBackroungScan()
        return Promise.resolve({ success: true, scanResult: JSON.parse(JSON.stringify(this.scanResult)) })
    }


    runBackroungScan(tabId, host) {
        this.reset()
        this.scanResult.scannedTabId = tabId
        this.scanResult.scanId = ptk_utils.UUID()
        this.scanResult.tabId = tabId
        this.scanResult.host = host
        this.scan()
        this.addListeners()
    }

    stopBackroungScan() {
       
        this.scanResult.tabId = null
        this.scanResult.requestQueue.clear()
        this.removeListeners()
    }

    addRequest(item) {
        let url = item.split('\n')[0]
        if (!this.scanResult.uniqueRequestQueue.has(url)) {
            this.scanResult.uniqueRequestQueue.enqueue(url)
            this.scanResult.requestQueue.enqueue(item)
        }
    }

    checkConfirmedAttack(data){
        let keys = Object.keys(this.scanResult.items)
        for (let i = 0; i < keys.length; i++) {
            let item = this.scanResult.items[keys[i]]
            for (let j = 0; j < item.attacks.length; j++) {
                if (data.attackValue.ptk == item.attacks[j].attack.options.attackParamValue && !item.attacks[j].success) {
                    item.attacks[j].success = true
                    item.attacks[j].proof += btoa('Confirmed by code execution on '+ data.location +'. Attack parameter value is: ' + data.attackValue.ptk )
                    this.scanResult.stats.vulnsCount++
                } 
            }
        }
    }

    async scan() {
        if (!this.scanResult.tabId) return
        let ptkRequest = new ptk_request({ "base": "" })

        while (this.scanResult.requestQueue.size()) {
            let item = this.scanResult.requestQueue.dequeue()
            let schema = ptkRequest.parseRawRequest({ request: item })
            this.runAllAttacks(schema)
        }

        let self = this
        setTimeout(function () { self.scan() }, 1000)
    }

    async runAllAttacks(schema) {
        let request = new ptk_request({ "base": "" })
        let attackId = ptk_utils.attackId()
        this.scanResult.items[attackId] = {}
        this.scanResult.items[attackId]['originalSchema'] = request.toString(schema)

        let originalRequest = await this.executeOriginal(schema, attackId)

        for (let key in this.attackModules) {
            let module = this.attackModules[key]
            for (let attackIndex in module.attacks) {
                let attack = module.attacks[attackIndex]
                if (attack.methods.includes(schema.request.method)) {

                    schema.request.asString = request.toString(schema)
                    let modified = module.prepareAttack(JSON.parse(JSON.stringify(schema)), JSON.parse(JSON.stringify(attack)), ptk_utils.attackParamId())

                    if (modified && modified.attack) {
                        let modifiedSchema = modified.schema
                        attack = modified.attack
                        if (["POST", "PUT", "DELETE", "PATCH"].includes(modifiedSchema.request.method)) {
                            modifiedSchema = this.modifyPostParams(modifiedSchema, attack.options)
                        }
                        let url = new URL(modifiedSchema.request.url)
                        if (url.search) {
                            modifiedSchema = this.modifyGetParams(modifiedSchema, attack.options)
                        }

                        modifiedSchema.asString = request.toString(modifiedSchema)

                        let item = await this.runAttack(modifiedSchema, attack)

                        let vulnRegex = attack.options.vulnRegex ? attack.options.vulnRegex : module.vulnRegex
                        module.validateAttack(item, vulnRegex, originalRequest)
                        if (item.success) this.scanResult.stats.vulnsCount++

                        this.scanResult.items[attackId]['attacks'].push(JSON.parse(JSON.stringify(item)))

                        browser.runtime.sendMessage({
                            channel: "ptk_background2popup_rattacker",
                            type: "attack completed",
                            info: item,
                            scanResult: JSON.parse(JSON.stringify(this.scanResult))
                        }).catch(e => ptk_logger.log(e, "Could not send a message", "info"))

                    }
                }
            }
        }
        if (!this.scanResult.requestQueue.size()) {
            browser.runtime.sendMessage({
                channel: "ptk_background2popup_rattacker",
                type: "all attacks completed",
                scanResult: JSON.parse(JSON.stringify(this.scanResult))
            }).catch(e => ptk_logger.log(e, "Could not send a message", "info"))
        }
    }

    modifyPostParams(modifiedSchema, options) {
        let params = modifiedSchema.request.body.split('&')
        for (let i in params) {
            params[i] = options.position == 'before' ? params[i].replace('=', '=' + options.attackValue) : params[i] + options.attackValue
        }
        modifiedSchema.request.body = params.join('&')
        return modifiedSchema
    }

    modifyGetParams(modifiedSchema, options) {
        let url = new URL(modifiedSchema.request.url)
        for (const [key, value] of url.searchParams) {
            let v = options.position === 'before' ? options.attackValue + value : value + options.attackValue
            url.searchParams.set(key, v)
        }
        modifiedSchema.request.url = url.toString()
        return modifiedSchema
    }

    async executeOriginal(schema, attackId) {

        this.scanResult.items[attackId]['originalUrl'] = schema.request.url
        this.scanResult.items[attackId]['attacks'] = []

        let request = new ptk_request({ "base": "" })
        schema.request.followRedirect = true
        let origResult = await request.sendRequest(schema)

        this.scanResult.items[attackId]['originalResponseStatus'] = origResult.status
        this.scanResult.items[attackId]['originalResponseBody'] = origResult.body
        this.scanResult.items[attackId]['originalResponseHeaders'] = origResult.headers
        return Promise.resolve({ status: origResult.status, body: origResult.body, headers: origResult.headers })
    }

    async runAttack(schema, attack) {
        let request = new ptk_request({ "base": "" })
        schema.request.followRedirect = true
        let item = {
            attack: attack,
            request: btoa(request.toString(schema)),
            baseUrl: schema.request.url,
            body: "",
            headers: "",
            failed: false
        }

        try {
            this.scanResult.stats.attacksCount++
            const result = await request.sendRequest(schema)
            let body = result.body
            item.body = body ? btoa(body) : ""
            item.headers = btoa(result.headers)
            item.responseStatus = result.responseStatus
            item.statusText = result.statusText
            item.responseStatusText = result.responseStatusText
            item.redirected = result.redirected
            return item
        } catch (error) {
            ptk_logger.log(error, "Could not run an attack", "info")
            item.failed = true
            return item
        }
    }

}
